<?xml version='1.0' encoding='UTF-8'?>
<relacionsql numrelacion="R8.4">
	<configdb>
		<hostdb>localhost</hostdb>
		<esquemadb>jardineria</esquemadb>
		<usuariodb>samuel</usuariodb>
		<passdb>12345</passdb>
	</configdb>
	<student>
		<alumno></alumno>
		<finalgrade>0</finalgrade>
		<totalgrade>0</totalgrade>
		<maxgrade>0</maxgrade>
	</student>
	<consultas>
		<query id="1" peso="1">
			<descq>
               ¿Cuál fue el pago medio (pago_medio) en 2009?
            </descq>
			<resppropo>
			select avg(sub.total_2009) as pago_medio
from (select p2.total as total_2009
	from pago p2 
	where year(fecha_pago) = '2009'
    ) as sub ;
			</resppropo>
			<respcorr>
			SELECT 
    AVG(p.total) AS pago_medio
FROM pago p
WHERE YEAR(p.fecha_pago) = 2009;
			</respcorr>
			<gradeq></gradeq>
			<feedback></feedback>
		</query>
		<query id="2" peso="1">
			<descq>
              Devuelve un listado de los productos que nunca han aparecido en un pedido
			  sin usar ALL, ANY, EXISTS ni JOIN ordenados alfabéticamente
			</descq>
			<resppropo>
			select p.nombre
from producto p
where p.codigo_producto not in(select distinct p.codigo_producto
	from producto p join detalle_pedido dp on p.codigo_producto = dp.codigo_producto
	)
order by nombre
			</resppropo>
			<respcorr>
			SELECT 
    pr.nombre
FROM producto pr
WHERE pr.codigo_producto NOT IN (
    SELECT dp.codigo_producto
    FROM detalle_pedido dp
) order by nombre;
			</respcorr>
			<gradeq></gradeq>
			<feedback></feedback>
		</query>
		<query id="3" peso="1">
			<descq>
		        Muestra el nombre de la ciudad que más clientes tenga junto al número de clientes
				(numero_clientes) sin usar MAX
			</descq>
			<resppropo>
			select sum(sub.codigo) as numero_clientes, sub.ciudad
from (select c.codigo_cliente as codigo, c.ciudad as ciudad
from cliente c
where c.ciudad is not null
) as sub
group by sub.ciudad
order by numero_clientes desc
limit 1
;
			</resppropo>
			<respcorr>
			SELECT 
    ciudad, 
    COUNT(codigo_cliente) AS numero_clientes
FROM cliente
GROUP BY ciudad
ORDER BY numero_clientes DESC
LIMIT 1;
			</respcorr>
			<gradeq></gradeq>
			<feedback></feedback>
		</query>
        <query id="4" peso="1">
			<descq>
				¿Calcula cuántos clientes tiene cada una de las ciudades que
				empiezan por M? Muestra el nombre de la ciudad junto
				al número de clientes (numero_clientes)
				mostrando primero las que más clientes tengan
				(en caso de que coincidan en número, ordenar alfabéticamente).
			</descq>
			<resppropo>
			select count(c.codigo_cliente) as numero_clientes, c.ciudad
from cliente c
where c.ciudad regexp '^M'
group by c.ciudad
order by numero_clientes, c.ciudad
;
			</resppropo>
			<respcorr>
			SELECT 
    c.ciudad, 
    COUNT(c.codigo_cliente) AS numero_clientes
FROM cliente c
WHERE c.ciudad LIKE 'M%'
GROUP BY c.ciudad
ORDER BY numero_clientes DESC, c.ciudad;
			</respcorr>
			<gradeq></gradeq>
			<feedback></feedback>
		</query>
        <query id="5" peso="1">
			<descq>
				Se desea obtener una lista de todos los empleados junto con
				los clientes a los que representan sin tener en cuenta a los clientes de
				la ciudad de Madrid, si es que tienen alguno asignado. La lista debe incluir
				el nombre y apellidos de los empleados, junto con el nombre del cliente al que
				representan. Si un empleado no tiene asignado ningún cliente,
				debe aparecer igualmente en la lista con un valor NULL en la columna de cliente.
				Ordena la lista por apellidos del empleado y si coinciden apellidos
				tener en cuenta el nombre (alfabéticamente)
			</descq>
			<resppropo>
			select e.nombre, e.apellido1, e.apellido2, c.nombre_cliente
from empleado e left join cliente c on c.codigo_empleado_rep_ventas = e.codigo_empleado
where c.codigo_cliente in (select c.codigo_cliente
from cliente c
where c.ciudad != 'Madrid'
) or c.codigo_cliente is null
order by e.apellido1, e.nombre
;
			</resppropo>
			<respcorr>
			SELECT 
    e.nombre, 
    e.apellido1, 
    e.apellido2, 
    c.nombre_cliente
FROM empleado e
LEFT JOIN cliente c ON e.codigo_empleado = c.codigo_empleado_rep_ventas
WHERE c.ciudad != 'Madrid' OR c.ciudad IS NULL
ORDER BY e.apellido1, e.apellido2, e.nombre;
			</respcorr>
			<gradeq></gradeq>
			<feedback></feedback>
		</query>
        <query id="6" peso="1">
			<descq>
				Devuelve el nombre, los apellidos y el email de los empleados que
				están a cargo de Alberto Soria aplicando subconsultas y ordenando
				alfabéticamente por email.
			</descq>
			<resppropo>
			</resppropo>
			<respcorr>
SELECT 
    e.nombre, 
    e.apellido1, 
    e.apellido2, 
    e.email
FROM empleado e
WHERE e.codigo_jefe = (
    SELECT codigo_empleado
    FROM empleado
    WHERE nombre = 'Alberto' AND apellido1 = 'Soria'
) order by email;
			</respcorr>
			<gradeq></gradeq>
			<feedback></feedback>
		</query>
        <query id="7" peso="1">
			<descq>
			Calcula los días entre el primer y último pago realizado por cada uno de los clientes (periodo_pago). El listado deberá mostrar el nombre de contacto y el apellido de contacto de cada cliente junto al cálculo periodo_pago ordenado desde el que tenga mayor periodo al que tenga menor.
			</descq>
			<resppropo>
			</resppropo>
			<respcorr>
			SELECT 
    c.nombre_contacto, 
    c.apellido_contacto, 
    DATEDIFF(MAX(p.fecha_pago), MIN(p.fecha_pago)) AS periodo_pago
FROM pago p
JOIN cliente c ON p.codigo_cliente = c.codigo_cliente
GROUP BY c.nombre_contacto, c.apellido_contacto
ORDER BY periodo_pago DESC;
			</respcorr>
			<gradeq></gradeq>
			<feedback></feedback>
		</query>
		<query id="8" peso="1">
			<descq>
			Calcula el número de productos diferentes (productos_diferentes) que hay en cada uno de los pedidos. Muestra el nombre del producto junto a la cantidad calculada y ordénalos alfabéticamente.
			</descq>
			<resppropo>
			</resppropo>
			<respcorr>
			SELECT 
    pr.nombre, 
    COUNT(DISTINCT dp.codigo_producto) AS productos_diferentes
FROM detalle_pedido dp
JOIN producto pr ON dp.codigo_producto = pr.codigo_producto
GROUP BY pr.nombre
ORDER BY pr.nombre;
			</respcorr>
			<gradeq></gradeq>
			<feedback></feedback>
		</query>
		<query id="9" peso="1">
			<descq>
			Calcula la suma de la cantidad total (cantidad_total) de cada uno de los productos sin stock que alguna vez han sido pedidos. Muestra el nombre del producto y la cantidad_total calculada
			</descq>
			<resppropo>
			</resppropo>
			<respcorr>
			SELECT 
    pr.nombre, 
    SUM(dp.cantidad) AS cantidad_total
FROM detalle_pedido dp
JOIN producto pr ON dp.codigo_producto = pr.codigo_producto
WHERE pr.cantidad_en_stock = 0
GROUP BY pr.nombre;
			</respcorr>
			<gradeq></gradeq>
			<feedback></feedback>
		</query>
		<query id="10" peso="1">
			<descq>
			Devuelve un listado de los nombres de los 20 productos más vendidos y el número total de unidades que se han vendido de cada uno (unidades_vendidas). El listado deberá estar ordenado por el número total de unidades vendidas de más grande a más pequeño.
			</descq>
			<resppropo>
			</resppropo>
			<respcorr>
			SELECT 
    pr.nombre, 
    SUM(dp.cantidad) AS unidades_vendidas
FROM detalle_pedido dp
JOIN producto pr ON dp.codigo_producto = pr.codigo_producto
GROUP BY pr.nombre
ORDER BY unidades_vendidas DESC
LIMIT 20;
			</respcorr>
			<gradeq></gradeq>
			<feedback></feedback>
		</query>
		<query id="11" peso="1">
			<descq>
				La facturación que ha tenido la empresa en toda la historia, indicando la base imponible (base_imponible), el IVA (iva) y el total facturado (total_facturado). La base imponible se calcula multiplicando el coste del producto en la tabla producto por el número de unidades vendidas de la tabla detalle_pedido. El IVA es el 21 % de la base imponible, y el total la suma de los dos campos anteriores.
			</descq>
			<resppropo>
			</resppropo>
			<respcorr>
			SELECT 
    SUM(dp.cantidad * pr.precio_venta) AS base_imponible, 
    SUM(dp.cantidad * pr.precio_venta * 0.21) AS iva, 
    SUM(dp.cantidad * pr.precio_venta * 1.21) AS total_facturado
FROM detalle_pedido dp
JOIN producto pr ON dp.codigo_producto = pr.codigo_producto;
			</respcorr>
			<gradeq></gradeq>
			<feedback></feedback>
		</query>
		<query id="12" peso="1">
			<descq>
			    La misma información que en la pregunta anterior, pero agrupada por código de producto. El resultado debe ordenarse por código de producto de forma ascendente.
			</descq>
			<resppropo>
			</resppropo>
			<respcorr>
			SELECT 
    SUM(dp.cantidad * pr.precio_venta) AS base_imponible, 
    SUM(dp.cantidad * pr.precio_venta * 0.21) AS iva, 
    SUM(dp.cantidad * pr.precio_venta * 1.21) AS total_facturado
FROM detalle_pedido dp
JOIN producto pr ON dp.codigo_producto = pr.codigo_producto 
GROUP BY dp.codigo_producto order by pr.codigo_producto;
			</respcorr>
			<gradeq></gradeq>
			<feedback></feedback>
		</query>
		<query id="13" peso="1">
			<descq>
				La misma información que en la pregunta anterior, pero agrupada por código de producto filtrada por los códigos que empiecen por OR. Se debe ordenar mediante el entero sin signo que va tras OR-, es decir, por ejemplo OR-99 debe ir antes de OR-101
			</descq>
			<resppropo>
			</resppropo>
			<respcorr>
			SELECT 
    dp.codigo_producto, 
    SUM(dp.cantidad * pr.precio_venta) AS base_imponible, 
    SUM(dp.cantidad * pr.precio_venta * 0.21) AS iva, 
    SUM(dp.cantidad * pr.precio_venta * 1.21) AS total_facturado
FROM detalle_pedido dp
JOIN producto pr ON dp.codigo_producto = pr.codigo_producto
WHERE pr.codigo_producto LIKE 'OR%'
GROUP BY dp.codigo_producto order by CAST(SUBSTRING(pr.codigo_producto, 4, 3) as UNSIGNED);
			</respcorr>
			<gradeq></gradeq>
			<feedback></feedback>
		</query>
		<query id="14" peso="1">
			<descq>
			Lista las ventas totales de los productos que empiecen por A y que hayan facturado más de 2000 euros. Se mostrará el nombre, unidades vendidas con el nombre de columna unidades_vendidas, total facturado como total_facturado y total facturado con impuestos (21% IVA) como total_con_iva ordenadas por nombre y unidades vendidas de menor a mayor.
			</descq>
			<resppropo>
			</resppropo>
			<respcorr>
			SELECT pr.nombre, 
       SUM(dp.cantidad) AS unidades_vendidas, 
       SUM(dp.cantidad * pr.precio_venta) AS total_facturado, 
       SUM(dp.cantidad * pr.precio_venta * 1.21) AS total_con_iva
FROM detalle_pedido dp
JOIN producto pr ON dp.codigo_producto = pr.codigo_producto
WHERE pr.nombre LIKE 'A%'
GROUP BY pr.nombre
HAVING SUM(dp.cantidad * pr.precio_venta) > 2000
ORDER BY pr.nombre, unidades_vendidas ASC;
			</respcorr>
			<gradeq></gradeq>
			<feedback></feedback>
		</query>
		<query id="15" peso="1">
			<descq>
				Se desea conocer el total de pagos recibidos en cada año, organizados por el empleado que produjo ese pago a través de sus clientes. Específicamente, se requiere obtener el año del pago (año), su nombre, su primer apellido y la suma total de pagos que gestionó llamando a esta columna suma. Escribe una consulta SQL que devuelva esta información, ordenada por año de menor a mayor y código de empleado de mayor a menor.
			</descq>
			<resppropo>
			</resppropo>
			<respcorr>
			SELECT YEAR(p.fecha_pago) AS año, 
       e.nombre, 
       e.apellido1, 
       SUM(p.total) AS suma
FROM pago p
JOIN cliente c ON p.codigo_cliente = c.codigo_cliente
JOIN empleado e ON c.codigo_empleado_rep_ventas = e.codigo_empleado
GROUP BY YEAR(p.fecha_pago), c.codigo_empleado_rep_ventas, e.nombre, e.apellido1
ORDER BY año asc, c.codigo_empleado_rep_ventas desc;
			</respcorr>
			<gradeq></gradeq>
			<feedback></feedback>
		</query>
	</consultas> 
</relacionsql>
